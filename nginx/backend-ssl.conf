# Nginx configuration for backend with SSL/TLS
# This file should be placed in /etc/nginx/sites-available/ on the server

# CORS origin mapping for dynamic origin support
map $http_origin $cors_origin {
    "~^https://ai\.zackz\.net$" "https://ai.zackz.net";
    "~^http://localhost:3000$" "http://localhost:3000";
    "~^http://localhost:3001$" "http://localhost:3001"; 
    "~^http://localhost:3002$" "http://localhost:3002";
    "~^http://localhost:3003$" "http://localhost:3003";
    default "";
}

# Rate limiting
limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;
limit_req_zone $binary_remote_addr zone=auth_limit:10m rate=5r/m;

# CORS is handled by Nginx (moved from Node.js backend)

# Upstream backend server
upstream backend {
    server localhost:5000;  # Backend runs on port 5000 internally
}

# HTTP Server for frontend (port 80)
server {
    listen 80;
    listen [::]:80;
    server_name ai.zackz.net;
    
    # Serve frontend from Docker container on port 8080
    location / {
        proxy_pass http://localhost:8080;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_cache_bypass $http_upgrade;
    }
}

# HTTPS Server for frontend (port 443)
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name ai.zackz.net;

    # SSL Certificate (Let's Encrypt)
    ssl_certificate /etc/letsencrypt/live/ai.zackz.net/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/ai.zackz.net/privkey.pem;

    # SSL Configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384';
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_stapling on;
    ssl_stapling_verify on;

    # Security headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;

    # Serve frontend from Docker container on port 8080
    location / {
        proxy_pass http://localhost:8080;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_cache_bypass $http_upgrade;
    }
}

# HTTPS Server for backend API (port 3000)
server {
    listen 3000 ssl http2;
    listen [::]:3000 ssl http2;
    server_name ai.zackz.net;

    # SSL Certificate (Let's Encrypt)
    ssl_certificate /etc/letsencrypt/live/ai.zackz.net/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/ai.zackz.net/privkey.pem;

    # SSL Configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384';
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_stapling on;
    ssl_stapling_verify on;

    # Security headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    # CORS headers for API endpoints (dynamic origin support)
    add_header Access-Control-Allow-Origin "$cors_origin" always;
    add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS, PATCH" always;
    add_header Access-Control-Allow-Headers "Accept, Authorization, Cache-Control, Content-Type, X-Requested-With" always;
    add_header Access-Control-Allow-Credentials "true" always;
    add_header Access-Control-Max-Age "1728000" always;

    # API endpoint
    location /api {
        # Handle CORS preflight requests
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin "$cors_origin";
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS, PATCH";
            add_header Access-Control-Allow-Headers "Accept, Authorization, Cache-Control, Content-Type, X-Requested-With";
            add_header Access-Control-Allow-Credentials "true";
            add_header Access-Control-Max-Age "1728000";
            add_header Content-Length 0;
            add_header Content-Type text/plain;
            return 204;
        }

        # Rate limiting for API
        limit_req zone=api_limit burst=20 nodelay;
        
        # Special rate limiting for auth endpoints
        location ~* ^/api/auth/(login|register|google)$ {
            # Handle CORS preflight requests for auth endpoints
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin "$cors_origin";
                add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS, PATCH";
                add_header Access-Control-Allow-Headers "Accept, Authorization, Cache-Control, Content-Type, X-Requested-With";
                add_header Access-Control-Allow-Credentials "true";
                add_header Access-Control-Max-Age "1728000";
                add_header Content-Length 0;
                add_header Content-Type text/plain;
                return 204;
            }
            
            limit_req zone=auth_limit burst=5 nodelay;
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
        }
        
        proxy_pass http://backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        
        # Timeouts for long-running requests
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }

    # WebSocket support for Socket.IO
    location /socket.io {
        # CORS headers for WebSocket
        add_header Access-Control-Allow-Origin "$cors_origin" always;
        add_header Access-Control-Allow-Credentials "true" always;
        
        proxy_pass http://backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket specific
        proxy_buffering off;
        proxy_set_header X-NginX-Proxy true;
        
        # Timeouts
        proxy_connect_timeout 3600s;
        proxy_send_timeout 3600s;
        proxy_read_timeout 3600s;
    }

    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
    
    # Root location - redirect to /api
    location = / {
        return 301 /api;
    }
}